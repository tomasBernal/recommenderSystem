package recommendationSystem;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.regex.Pattern;

public class CollaborativeFiltering {

	// StandarValue = (value - rowMeanValue) / (rowMax - rowMin)
	public static List<ArrayList<Double>> standarize(List<ArrayList<Double>> matrix) {
		
		ArrayList<ArrayList<Double>> mStandard = new ArrayList<>();
		double mean, maximum, minimum, total;
		
		for (int i = 0; i < matrix.size(); i++) {
			// for every row we calculate the mean, the maximum and the minimum
			minimum = matrix.get(i).get(0);
			maximum = matrix.get(i).get(0);
			total = matrix.get(i).get(0);
			for (int j = 1; j < matrix.get(i).size(); j++) {
				total += matrix.get(i).get(j);
				if (matrix.get(i).get(j) > maximum)
					maximum = matrix.get(i).get(j);
				if (matrix.get(i).get(j) < minimum)
					minimum = matrix.get(i).get(j);
			}
			mean = total / matrix.get(i).size();
			System.out.println("Row " + i + ":");
			System.out.println("Mean = " + mean + ", Maximum = " + maximum + ", Minimum = " + minimum);
			ArrayList<Double> a = new ArrayList<>();
			for (int j = 0; j < matrix.get(i).size(); j++) {
				// StandarValue = (value - rowMeanValue) / (rowMax - rowMin)
				a.add((matrix.get(i).get(j) - mean) / (maximum - minimum));
			}
			mStandard.add(a);
		}
		return mStandard;
	}

	// Show a matrix in the console
	public static void matrixReader(List<ArrayList<Double>> matrix) {
		
		for (int i = 0; i < matrix.size(); i++) {
			System.out.print(matrix.get(i).get(0));
			for (int j = 1; j < matrix.get(i).size(); j++) {
				System.out.print(", " + matrix.get(i).get(j));
			}
			System.out.println();
		}
		 
	}

	// Show a matrix of two arrays in the console
	public static void matrixReader(double[][] matrix) {
		for (int i = 0; i < matrix.length; i++) {
			System.out.print(matrix[i][0]);
			for (int j = 1; j < matrix[i].length; j++) {
				System.out.print(", " + matrix[i][j]);
			}
			System.out.println("");
		}
	}

	/*
	 * ð�‘†ð�‘–ð�‘šð�‘–ð�‘™ð�‘Žð�‘Ÿð�‘–ð�‘¡ð�‘¦(ð��´,ð��µ)=cos(ð�œƒ)=(ð��´â‹…ð��µ) / (||ð��´||Ã—||ð��µ||) n
	 * ð��´â‹…ð��µ=âˆ‘ð��´ð�‘–Ã—ð��µð�‘–=(ð��´1Ã—ð��µ1)+(ð��´2Ã—ð��µ2)+â€¦+(ð��´ð�‘›Ã—ð��µð�‘›) i=1 ||ð��´|| =
	 * sqrt(sumatory[1,n](pow(Ai,2)) ||ð��µ|| = sqrt(sumatory[1,n](pow(Bi,2))
	 */
	public static double[][] cosineSimilarity(double[][] matrix) {
		double[][] csMatrix = new double[matrix.length][matrix.length];
		/*
		 * 1 2 3 1 4 5
		 */
		// A: row that we are calculating the similarity with the other rows
		for (int a = 0; a < matrix.length; a++) {
			// B: the other row
			for (int b = 0; b < matrix.length; b++) {
				double dotProduct = 0;
				// calculation of the dot product between the 2 rows
				// ð��´â‹…ð��µ=âˆ‘ð��´ð�‘–Ã—ð��µð�‘–=(ð��´1Ã—ð��µ1)+(ð��´2Ã—ð��µ2)+â€¦+(ð��´ð�‘›Ã—ð��µð�‘›)
				for (int j = 0; j < matrix[a].length; j++) {
					dotProduct += matrix[a][j] * matrix[b][j];
				}
				// ||ð��´||Ã—||ð��µ||:
				// ||ð��´|| = sqrt(sumatory[1,n](pow(Ai,2))
				double sum = 0;
				for (int j = 0; j < matrix[a].length; j++) {
					sum += Math.pow(matrix[a][j], 2);
				}
				double A = Math.sqrt(sum);
				// ||ð��µ||:
				sum = 0;
				for (int j = 0; j < matrix[a].length; j++) {
					sum += Math.pow(matrix[b][j], 2);
				}
				double B = Math.sqrt(sum);
				double AxB = A * B;
				double cos = dotProduct / AxB;
				csMatrix[a][b] = cos;
			}
		}
		return csMatrix;

	}

	// for one movie watched and rated by an user it returns all the movies with a
	// value the film with the second highest value
	// would be the one recommended as the first one is the movie itself
	public static Map<String, Double> getSimilarMovies(String movie, double rating, double fixer, double[][] matrix,
			List<String> movies) {
		HashMap<String, Double> similarMovies = new HashMap<>();
		// User Movie
		int m = movies.indexOf(movie);
		for (int j = 0; j < matrix.length; j++) {
			// The new value is the result of multiply the value of each movie with the
			// movie of the user with the rating of the user minus a number call fixer
			similarMovies.put(movies.get(j), matrix[m][j] * (rating - fixer));
		}
		LinkedHashMap<String, Double> recommendation = new LinkedHashMap<>();
		// Descent order, first one is the same film so we don't have to look to the
		// first one, the recommendation would be the second one.
		similarMovies.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
				.forEachOrdered(x -> recommendation.put(x.getKey(), x.getValue()));

		return recommendation;
	}

	public static void main(String[] args) {
		/*
		 * Lo que necesitamos ahora no es una clase lectora si no una clase que tenga
		 * las funciones basicas con .csv Que pueda leer un csv y escribir en Ã©l para
		 * modificarlo con javaCSV no puedo modificar una fila concreta solo puedo
		 * aÃ±adir nuevas filas enteras ni si quiera borrar Parece ser que cada vez que
		 * tengo que cambiar un dato debo de crear un .csv entero nuevo Para evitar
		 * estar todo el rato creando .csv y para que sea mas facil y mÃ¡s rÃ¡pido
		 * computancionalmente debemos tratar los datos como si fuese una MATRIZ asÃ­ que
		 * deberÃ­amos aÃ±adir los datos a una matriz, asÃ­ podriamos cambiar los datos de
		 * manera mas eficaz, transponerla y jugar con los datos que son todos numÃ©ricos
		 * si solo nos quedamos al final del.csv con que los indices de las columnas son
		 * productos/peliculas y los indices de las filas son usuarios Si usamos una
		 * matriz igual no hace falta hacer un writeCSV pues no es necesario modificar
		 * el fichero como tal
		 * 
		 */

		/*
		 * 1. Leo el .csv y lo paso a una matriz quitando los datos que no me importe
		 * dejando solo las valoraciones de los usuarios(i) a cada producto(j) quizas me
		 * interesa guardarme en otra estructura de datos la informacion importante de
		 * cada columna por ejemplo el tipo de producto o el genero de la pelicula para
		 * despues ver si estamos haciendo buenas recomendaciones o si las
		 * recomendaciones tienen sentido, es decir si a una persona que le guste mucho
		 * la accion las recomendaciones son peliculas de accion y me quedo con las
		 * peliculas que hay 2. Normalizo los datos donde no hayan valores pongo un 0
		 * 
		 */
		
		// First we obtain the name of the movies with the id
		List<MovieId> films;
		films = ReaderOfFiles.getMovies("C:\\Users\\tomas\\Desktop\\AI\\Implementacion\\DataSets\\MoviesDataset\\\\movies.csv", ",");
		
		System.out.println("FILMS:");
		
		for( MovieId m : films) {
			System.out.println(m.name + " " + m.id);
		}
		
		System.out.println("");
		System.out.println("");

		// Esto crea el csv tratado
		//ReaderOfFiles.extractContent("C:\\\\Users\\\\tomas\\\\Desktop\\\\AI\\\\Implementacion\\\\DataSets\\\\MoviesDataset\\\\\\\\ratings.csv", ",", films);
		
		// Second we create a structure with the ratings of the users
		List<ArrayList<Double>> matrix;
		matrix = ReaderOfFiles.readFile("C:\\Users\\tomas\\Desktop\\prueba.txt", ",", films);
		
		System.out.println("MATRIX:");
		
		matrixReader(matrix);

		/*
		 * 3. Estandarizo los datos es decir para cada fila debo de calcular para cada
		 * valor cual es su valor estandarizado y este es: (valor - valorMedioFila) /
		 * (maximoFila - minimoFila)
		 */
		
		List<ArrayList<Double>> mStandard;
		System.out.println("");
		System.out.println("STANDARIZE DATA:");
		mStandard = CollaborativeFiltering.standarize(matrix);

		System.out.println();
		System.out.println("MATRIX STANDARD");
		matrixReader(mStandard);
		/*
		 * 4. Si quieres item to item (Lo vamos a hacer) que en teoria es mejor
		 * recomendacion y es la que hace el video y por tanto mas facil de seguir el
		 * video debes de hacer la transpuesta de la matriz de los datos
		 */
		// transposed matrix
		double[][] matrixT = new double[mStandard.get(0).size()][mStandard.size()];
		for (int x = 0; x < mStandard.size(); x++) {
			for (int y = 0; y < mStandard.get(x).size(); y++) {
				matrixT[y][x] = mStandard.get(x).get(y);
			}
		}
		System.out.println("");
		System.out.println("TRANSPOSED MATRIX");
		matrixReader(matrixT);

		/*
		 * 5. Hay que crear una matriz nueva fruto del cuisine similarity por cada
		 * columna es decir por cada peli debemos de decir cual es su cuisine similarity
		 * con el resto de pelis es decir con el resto de columnas asi que se nos queda
		 * una nueva matriz jxj PelixPeli El cuisine similarity se calcula con el dot
		 * product o producto escalar, si recordamos del instituto para calcular el
		 * cos(angulo) lo usabamos. ð��´â‹…ð��µ = ||ð��´||Ã—||ð��µ||Ã—cos(ð�œƒ)
		 * ð�‘†ð�‘–ð�‘šð�‘–ð�‘™ð�‘Žð�‘Ÿð�‘–ð�‘¡ð�‘¦(ð��´,ð��µ)=cos(ð�œƒ)=(ð��´â‹…ð��µ) / (||ð��´||Ã—||ð��µ||) n
		 * ð��´â‹…ð��µ=âˆ‘ð��´ð�‘–Ã—ð��µð�‘–=(ð��´1Ã—ð��µ1)+(ð��´2Ã—ð��µ2)+â€¦+(ð��´ð�‘›Ã—ð��µð�‘›) i=1 ||ð��´|| =
		 * sqrt(sumatory[1,n](pow(Ai,2)) ||ð��µ|| = sqrt(sumatory[1,n](pow(Bi,2))
		 */
		double[][] csMatrix = cosineSimilarity(matrixT);
		System.out.println("");
		System.out.println("COSINE SIMILARITY MATRIX");
		matrixReader(csMatrix);
		/*
		 * 6. Creamos funcion getSimilarMovies que para una peli dada (simularia una
		 * peli vista por un usuario) y el rating dado por el usuario cogeriamos la fila
		 * donde esta esa peli y multiplicariamos cada valor de esa peli con el resto de
		 * pelis es decir la fila de esa peli por el rating dado por el usuario - 2.5 si
		 * el rating es entre 0 y 5 es decir la mitad justa para que el valor sea
		 * coherente (ve el video) Lo que devuelve esta funcion es un mapa con la peli y
		 * su valor para la peli dada por el usuario y el rating dado. Dichos elementos
		 * deberian de ser devueltos ordenados en orden decreciente por su valor. El
		 * primero de todos es la propia peli (logicamente esta tendra el valor mas
		 * grande pues es la que mas se parece a si misma, a la peli dada(ve video)) y
		 * el segundo es la peli recomendada
		 */
		Map<String, Double> similarMovies = CollaborativeFiltering.getSimilarMovies("action1", 4, 2.5, csMatrix, films);
		System.out.println("");
		System.out.println("Recommendation for Movie action1: ");
		System.out.println(similarMovies);

		/*
		 * 7. Utilizando la funcion del paso 6 crear nueva funcion que para un usuario
		 * concreto, que ha valorado una serie de peliculas, nos haga una recomendaciÃ³n
		 * Para eso que genere una nueva matriz donde para cada peli que ha visto nos
		 * calcule teniendo en cuenta la recomendacion del usuario usando la funcion
		 * getSimilarMovies del paso 6 cual es el valor para cada una de las pelis
		 * valoradas por el usuario con cada una de las pelis del catalago DespuÃ©s debe
		 * de sumar los valores de cada columna donde estan cada una de las pelis del
		 * catalago guardandolas en un mapa con peli - valor y ver cual de esas es la
		 * mÃ¡s alta sin ser una de las que ya ha visto (valorado) el usuario
		 */

		// I will ask the user to introduce the films and the rating of the films he has
		// seen
		System.out.println("");
		System.out
				.println("Write the name of the movie of the catalog that you have seen and the rating between 0 to 5");
		Boolean finish = false;
		Map<String, Double> userData = new LinkedHashMap<>();
		do {
			Scanner keyboard = new Scanner(System.in);
			System.out.println("Catalog:");
			System.out.println(films);
			System.out.println("Movie: ");
			String film = keyboard.nextLine();
			
			while (!films.contains(film)) {
				System.out.println("The movie must be in the catalog");
				System.out.println("Catalog:");
				System.out.println(films);
				System.out.println("Movie: ");
				film = keyboard.nextLine();
			}
			
			System.out.println("Rating: ");
			String rat = keyboard.nextLine();
			
			// While it is not a double we ask again
			while ((!Pattern.matches("[012345]", rat)) && (!Pattern.matches("[012345]\\.\\d+", rat))) {
				System.out.println("You must write a number between 0 and 5");
				System.out.println("Rating: ");
				rat = keyboard.nextLine();

			}
			
			System.out.println("Press y to continue and n to finish");
			userData.put(film, Double.parseDouble(rat));

			if (keyboard.nextLine().equals("n"))
				finish = true;
				keyboard.close();
		} while (!finish);
		System.out.println("Movies of the user:");
		System.out.println(userData);

		// With these films I will make the recommendation
		Map<String, Map<String, Double>> ourMovies = new LinkedHashMap<>();
		for (String mymovie : userData.keySet()) {
			Map<String, Double> rMovies = CollaborativeFiltering.getSimilarMovies(mymovie, userData.get(mymovie), 2.5,
					csMatrix, films);
			ourMovies.put(mymovie, rMovies);
		}

		// Cojo las recomendacionesuna de la peli de la lista de pelis del suario
		/*
		 * Quiero obtener una peli cualquiera del conjunto de pelis de our Movies quiero
		 * recorrer las recomendaciones para esa peli y por cada peli recomendada quiero
		 * obtener su valor aÃ±adirlo a una variable suma que inicalmente valga 0 despues
		 * recorrer el resto de pels del usuario y obtener la sigueinte peli del usuario
		 * de esa peli recorrro sus recomendaciones cogiendo la peli recomendada que he
		 * seleccionado en la anterioror peli del usuario y sumarle su valor al anterior
		 * luego paso a la siguiente peli del usuario y obtemgo sus recoemndaciones y
		 * encuentro ahi tambien la peli de antes y la sumo asi con todos las pelis del
		 * usuario y despues vuelvo a la siguiente peli recomendada para la peli 1 y
		 * busco esa peli para el resto de pelis recomendadas del resto de pelis del
		 * usuario que LIO AHHHHbggggggggggggggggg
		 * 
		 */
		// Final recommendation as a sum of the others
		Map<String, Double> recommendationMovies = new LinkedHashMap<>();
		for (String m : films) {
			recommendationMovies.put(m, 0.0);
		}
		System.out.println("");
		System.out.println("MAPA:");
		for (Map<String, Double> e : ourMovies.values()) {
			System.out.println(e);
			for (String key : e.keySet()) {
				double sum = recommendationMovies.get(key) + e.get(key);
				recommendationMovies.put(key, sum);
			}
		}
		
		
		LinkedHashMap<String, Double> recommendation = new LinkedHashMap<>();
		// Descent order
		recommendationMovies.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
				.forEachOrdered(x -> recommendation.put(x.getKey(), x.getValue()));
		System.out.println("");
		System.out.println("VALUES OF THE RECOMMENDATION FOR THE USER: ");
		System.out.println(recommendation);
		
		//the films of the recommendation that have been seen by the user must be ignored, the first one is the recommendation
		for(String movieUse : userData.keySet()) {
			recommendation.remove(movieUse);
		}
		System.out.println("");
		System.out.println("RECOMMENDATION FOR THE USER: ");
		System.out.println(recommendation);
		
	}

}
